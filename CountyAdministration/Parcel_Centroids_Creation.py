# ---------------------------------------------------------------------------
# Parcel_Centroids_Creation.py
# Created on: 2013-02-14 14:24:59.00000
#   (base script generated by ArcGIS/ModelBuilder)
# Description: This script calculates the following fields in the PARCELS
# feature class:
# ACRES, SQFT, Centroid_X, and CentroidY
# It checks for the existence of an older data table and centroids layer.
# If they exist, it deletes them so that it can make new ones.
# Next, it exports the table data from the PARCELS feature class to a
# table in the Appraiser.gdb file geodatabase called
# Parcel_Centroids_Table_Data.
# Then, it creates an XY event layer (of points) from the Centroid_X and
# Centroid_Y columns in that table.
# Lastly, it saves the event layer as a point feature class in the
# Appraiser.gdb file geodatabase called Parcel_Centroids.
#
# The Parcel_Centroids are then ready to be used for labeling Parcel Numbers
# and Acreages in mxds files.
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
from arcpy import env

def main():

  # Set environment settings
  env.workspace = "C:\\GISdata\\Maintenance\\Appraiser.gdb"

  try: 
    # Set local variables
    inFeatures = "PARCELS"
    fieldName1 = "ACRES"
    fieldName2 = "SQFT"
    fieldName3 = "Centroid_X"
    fieldName4 = "Centroid_Y"
    
    # Expressions are calculated using the Shape Field's geometry property
    expression1 = "float(!SHAPE.AREA@ACRES!)"
    expression2 = "float(!SHAPE.AREA!)"
    expression3 = "float(!SHAPE.CENTROID!.split()[0])"
    expression4 = "float(!SHAPE.CENTROID!.split()[1])"
    
    print "Parcel Centroids Creation started."
 
    # Execute CalculateField 
    arcpy.CalculateField_management(inFeatures, fieldName1, expression1, "PYTHON")
    arcpy.CalculateField_management(inFeatures, fieldName2, expression2, "PYTHON")
    arcpy.CalculateField_management(inFeatures, fieldName3, 'float(!SHAPE.CENTROID!.split()[0])', "PYTHON")
    arcpy.CalculateField_management(inFeatures, fieldName4, 'float(!SHAPE.CENTROID!.split()[1])', "PYTHON")
    # Line 54 'arcpy.CalculateField_management(inFeatures, fieldName3, 'float(!SHAPE.CENTROID!.split()[0])', "PYTHON")'
    # will fail if there is something in the parcel layer which does not belong, such as an annotation that was
    # accidentally pasted into it.
    # Look for database rows that have 0 square feet in the size column and/or which come up as <NULL> after
    # using Calculate Geometry from within ArcMap to get the X Centroid and Y Centroid.
    # Note that normally, it is not necessary to Calculate Geometry in ArcMap to get the
    # X and Y Centroids as this script does that. Use it when this script fails to isolate the database rows
    # which are causing the error.
  except Exception as e:
    # If an error occurred, print line number and error message
    import traceback, sys
    tb = sys.exc_info()[2]
    print "Line %i" % tb.tb_lineno
    print e.message

  try: 
    # Local variables:
    PARCELS = "C:\\GISdata\\Maintenance\\Appraiser.gdb\\Polygons\\PARCELS"
    Appraiser_gdb = "C:\\GISdata\\Maintenance\\Appraiser.gdb"
    Parcel_Centroids_Table_Data_Layer = "Parcel_Centroids_Table_Data_Layer"
    Parcel_Centroids = "C:\\GISdata\\Maintenance\\Appraiser.gdb\\Points\\Parcel_Centroids"
    Parcel_Centroids_Table_Data = "C:\\GISdata\\Maintenance\\Appraiser.gdb\\Parcel_Centroids_Table_Data"

    # Delete the previous files, if they exist.
    if arcpy.Exists(Parcel_Centroids_Table_Data):
      arcpy.Delete_management(Parcel_Centroids_Table_Data)
    if arcpy.Exists(Parcel_Centroids):
      arcpy.Delete_management(Parcel_Centroids)
	
    # Process: Table to Table
    arcpy.TableToTable_conversion(PARCELS, Appraiser_gdb, "Parcel_Centroids_Table_Data")
    
    # Process: Make XY Event Layer
    arcpy.MakeXYEventLayer_management(Parcel_Centroids_Table_Data, "Centroid_X", "Centroid_Y", Parcel_Centroids_Table_Data_Layer, "", "")

    # Process: Copy Features
    arcpy.CopyFeatures_management(Parcel_Centroids_Table_Data_Layer, Parcel_Centroids, "", "0", "0", "0")

  except Exception as e:
    # If an error occurred, print line number and error message
    import traceback, sys
    tb = sys.exc_info()[2]
    print "Line %i" % tb.tb_lineno
    print e.message

if __name__ == "__main__":
  main()
  print "Script completed."
  print "Press ENTER or close the script to quit."
  inputTest = raw_input("> ")
  inputTest = inputTest + "a"
  exit()